// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tribo.Models;

#nullable disable

namespace Tribo.Migrations
{
    [DbContext(typeof(TriboDbContext))]
    [Migration("20220103175743_teste")]
    partial class teste
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Tribo.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Id_Cliente")
                        .HasColumnType("int");

                    b.Property<int?>("Id_Contato")
                        .HasColumnType("int");

                    b.Property<int?>("Id_Pacote")
                        .HasColumnType("int");

                    b.Property<int?>("Id_TriboParceira")
                        .HasColumnType("int");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id_Cliente")
                        .IsUnique()
                        .HasFilter("[Id_Cliente] IS NOT NULL");

                    b.HasIndex("Id_Contato")
                        .IsUnique()
                        .HasFilter("[Id_Contato] IS NOT NULL");

                    b.HasIndex("Id_Pacote")
                        .IsUnique()
                        .HasFilter("[Id_Pacote] IS NOT NULL");

                    b.HasIndex("Id_TriboParceira")
                        .IsUnique()
                        .HasFilter("[Id_TriboParceira] IS NOT NULL");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("Tribo.Models.Cliente", b =>
                {
                    b.Property<int>("IdCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCliente"), 1L, 1);

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Id_Pacote")
                        .HasColumnType("int");

                    b.Property<int>("Idade")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tipoUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCliente");

                    b.HasIndex("Id_Pacote")
                        .IsUnique()
                        .HasFilter("[Id_Pacote] IS NOT NULL");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("Tribo.Models.Contato", b =>
                {
                    b.Property<int>("IdContato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdContato"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mensagem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdContato");

                    b.ToTable("Contato");
                });

            modelBuilder.Entity("Tribo.Models.Imagem", b =>
                {
                    b.Property<int>("IdImg")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdImg"), 1L, 1);

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Dados")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdImg");

                    b.ToTable("Imagem");
                });

            modelBuilder.Entity("Tribo.Models.Pacote", b =>
                {
                    b.Property<int>("IdPacote")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPacote"), 1L, 1);

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Destino")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Id_Imagem")
                        .HasColumnType("int");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPacote");

                    b.HasIndex("Id_Imagem")
                        .IsUnique()
                        .HasFilter("[Id_Imagem] IS NOT NULL");

                    b.ToTable("Pacote");
                });

            modelBuilder.Entity("Tribo.Models.TriboParceira", b =>
                {
                    b.Property<int>("IdTribo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTribo"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Id_Pacote")
                        .HasColumnType("int");

                    b.Property<string>("NomeTribo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tipoUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTribo");

                    b.HasIndex("Id_Pacote")
                        .IsUnique()
                        .HasFilter("[Id_Pacote] IS NOT NULL");

                    b.ToTable("TriboParceira");
                });

            modelBuilder.Entity("Tribo.Models.Admin", b =>
                {
                    b.HasOne("Tribo.Models.Cliente", "Cliente")
                        .WithOne("Admin")
                        .HasForeignKey("Tribo.Models.Admin", "Id_Cliente");

                    b.HasOne("Tribo.Models.Contato", "Contato")
                        .WithOne("Admin")
                        .HasForeignKey("Tribo.Models.Admin", "Id_Contato");

                    b.HasOne("Tribo.Models.Pacote", "Pacote")
                        .WithOne("Admin")
                        .HasForeignKey("Tribo.Models.Admin", "Id_Pacote");

                    b.HasOne("Tribo.Models.TriboParceira", "TriboParceira")
                        .WithOne("Admin")
                        .HasForeignKey("Tribo.Models.Admin", "Id_TriboParceira");

                    b.Navigation("Cliente");

                    b.Navigation("Contato");

                    b.Navigation("Pacote");

                    b.Navigation("TriboParceira");
                });

            modelBuilder.Entity("Tribo.Models.Cliente", b =>
                {
                    b.HasOne("Tribo.Models.Pacote", "Pacote")
                        .WithOne("Cliente")
                        .HasForeignKey("Tribo.Models.Cliente", "Id_Pacote");

                    b.Navigation("Pacote");
                });

            modelBuilder.Entity("Tribo.Models.Pacote", b =>
                {
                    b.HasOne("Tribo.Models.Imagem", "Imagem")
                        .WithOne("Pacote")
                        .HasForeignKey("Tribo.Models.Pacote", "Id_Imagem");

                    b.Navigation("Imagem");
                });

            modelBuilder.Entity("Tribo.Models.TriboParceira", b =>
                {
                    b.HasOne("Tribo.Models.Pacote", "Pacote")
                        .WithOne("Tribo")
                        .HasForeignKey("Tribo.Models.TriboParceira", "Id_Pacote");

                    b.Navigation("Pacote");
                });

            modelBuilder.Entity("Tribo.Models.Cliente", b =>
                {
                    b.Navigation("Admin")
                        .IsRequired();
                });

            modelBuilder.Entity("Tribo.Models.Contato", b =>
                {
                    b.Navigation("Admin")
                        .IsRequired();
                });

            modelBuilder.Entity("Tribo.Models.Imagem", b =>
                {
                    b.Navigation("Pacote")
                        .IsRequired();
                });

            modelBuilder.Entity("Tribo.Models.Pacote", b =>
                {
                    b.Navigation("Admin")
                        .IsRequired();

                    b.Navigation("Cliente")
                        .IsRequired();

                    b.Navigation("Tribo")
                        .IsRequired();
                });

            modelBuilder.Entity("Tribo.Models.TriboParceira", b =>
                {
                    b.Navigation("Admin");
                });
#pragma warning restore 612, 618
        }
    }
}
